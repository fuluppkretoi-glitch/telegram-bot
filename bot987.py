import telebot
from telebot import types
from datetime import datetime, timedelta
import json
import os

# üîë –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏ —á–∞—Ç –∞–¥–º–∏–Ω–∞
TOKEN = "8264888146:AAFNqMNQUIDPOoNZYuQ2mnhFIIV0ECOA2BY"
ADMIN_CHAT_ID = -1002939358940

bot = telebot.TeleBot(TOKEN)

# üìÇ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
SUB_FILE = "subscriptions.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫ –∑ —Ñ–∞–π–ª–∞
def load_subscriptions():
    if os.path.exists(SUB_FILE):
        with open(SUB_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return {int(uid): datetime.fromisoformat(date) for uid, date in data.items()}
    return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫ —É —Ñ–∞–π–ª
def save_subscriptions():
    with open(SUB_FILE, "w", encoding="utf-8") as f:
        json.dump({uid: date.isoformat() for uid, date in subscriptions.items()}, f, ensure_ascii=False, indent=2)

# üì¶ –ü—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
subscriptions = load_subscriptions()

# üìÇ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Å–ª—É–≥
catalog = {
    "ü§ñ –ü—Ä–æ—Å—Ç–∏–π –±–æ—Ç (—Ä–∞–∑–æ–≤–∞ –ø–æ—Å–ª—É–≥–∞)": {
        "price": "50‚Ç¥",
        "desc": "–ë–æ—Ç –∑ –ø—Ä–æ—Å—Ç–∏–º –º–µ–Ω—é —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏."
    },
    "üíµ –ë–æ—Ç –∑ –æ–ø–ª–∞—Ç–æ—é —Ç–∞ –∞–¥–º—ñ–Ω-—á–∞—Ç–æ–º": {
        "price": "120‚Ç¥",
        "desc": "–ë–æ—Ç –∑ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ—é –æ–ø–ª–∞—Ç–æ—é —Ç–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º —á–µ–∫—ñ–≤ –≤ –∞–¥–º—ñ–Ω-—á–∞—Ç."
    },
    "üõí –ú–∞–≥–∞–∑–∏–Ω/–∫–∞—Ç–∞–ª–æ–≥ —É Telegram": {
        "price": "200‚Ç¥",
        "desc": "–ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω —É Telegram –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —Ç–∞ —Ç–æ–≤–∞—Ä–∞–º–∏."
    },
    "‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ –∑–∞–ø—É—Å–∫": {
        "price": "30‚Ç¥",
        "desc": "–ú–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –Ω–∞ –≤–∞—à–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ/–ü–ö."
    },
    "‚öôÔ∏è –©–æ–º—ñ—Å—è—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞": {
        "price": "80‚Ç¥",
        "desc": "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º –º—ñ—Å—è—Ü—è."
    },
    "üöÄ –†–µ–∫–ª–∞–º–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö": {
        "price": "50‚Ç¥",
        "desc": "–†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ —É Telegram –∫–∞–Ω–∞–ª–∞—Ö –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∞—É–¥–∏—Ç–æ—Ä—ñ—î—é."
    },
    "üìÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω—ñ–≤": {
        "price": "100‚Ç¥",
        "desc": "–î–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –∫–æ–º–ø–∞–Ω—ñ—ó –ø—Ä–æ—Ç—è–≥–æ–º 30 –¥–Ω—ñ–≤."
    }
}

# üè† –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìÇ –ö–∞—Ç–∞–ª–æ–≥")
    btn2 = types.KeyboardButton("üëë –ú–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞")
    btn3 = types.KeyboardButton("üìñ FAQ")
    btn4 = types.KeyboardButton("üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id,
                     "üëã –í—ñ—Ç–∞—î–º–æ —É *NEXTBOT COMPANY*!\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
                     reply_markup=markup, parse_mode="Markdown")

# üìÇ –ö–∞—Ç–∞–ª–æ–≥
@bot.message_handler(func=lambda message: message.text == "üìÇ –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    markup = types.InlineKeyboardMarkup()
    for item, data in catalog.items():
        markup.add(types.InlineKeyboardButton(
            text=f"{item} ‚Äî {data['price']}", callback_data=f"info_{item}"
        ))
    bot.send_message(message.chat.id, "üìÇ –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ –ø–æ—Å–ª—É–≥:", reply_markup=markup)

# üìå –ü–æ–∫–∞–∑ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("info_"))
def service_info(call):
    service = call.data.replace("info_", "")
    data = catalog[service]
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", callback_data=f"order_{service}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"*{service}*\n\n{data['desc']}\nüíµ –¶—ñ–Ω–∞: {data['price']}",
        parse_mode="Markdown",
        reply_markup=markup
    )

# üîô –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥
@bot.callback_query_handler(func=lambda call: call.data == "back_catalog")
def back_to_catalog(call):
    show_catalog(call.message)

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))

def order_service(call):
    service = call.data.replace("order_", "")
    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: *{service}*\n\n"
        f"üíµ –î–ª—è –æ–ø–ª–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–∞—Ä—Ç—É:\n"
        f"4242 4242 4242 4242\n\n"
        f"üì© –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –ø—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —á–µ–∫, —ñ –º–∏ –æ–¥—Ä–∞–∑—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
        parse_mode="Markdown"
    )

# üëë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
@bot.message_handler(func=lambda message: message.text == "üëë –ú–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞")
def my_subscription(message):
    user_id = message.chat.id
    if user_id in subscriptions and subscriptions[user_id] > datetime.now():
        end_date = subscriptions[user_id].strftime("%d.%m.%Y %H:%M")
        bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: *{end_date}*", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.\n–û—Ñ–æ—Ä–º—ñ—Ç—å —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥.")

# üìñ FAQ
@bot.message_handler(func=lambda message: message.text == "üìñ FAQ")
def faq(message):
    text = (
        "üìñ *–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:*\n\n"
        "‚ùì *–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?*\n"
        "‚Äî –û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É —É –∫–∞—Ç–∞–ª–æ–∑—ñ, –æ–ø–ª–∞—Ç—ñ—Ç—å —Ç–∞ –ø—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —á–µ–∫.\n\n"
        "‚ùì *–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –∑–∞–π–º–∞—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è?*\n"
        "‚Äî –í—ñ–¥ 1 –¥–æ 3 –¥–Ω—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ.\n\n"
        "‚ùì *–ß–∏ –º–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥?*\n"
        "‚Äî –¢–∞–∫, –Ω–∞–ø–∏—à—ñ—Ç—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É.\n"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

# üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞
@bot.message_handler(func=lambda message: message.text == "üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
def support(message):
    bot.send_message(
        message.chat.id,
        "üÜò –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—à–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n@NextBot_SupportTeam"
    )

# üì© –ü–µ—Ä–µ—Å–∏–ª–∫–∞ —á–µ–∫—ñ–≤
@bot.message_handler(content_types=['photo', 'document'])
def handle_payment_proof(message):
    bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)
    bot.send_message(
        message.chat.id,
        "‚úÖ –ß–µ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ! –ú–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Ç–∞ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
    )

# üëë –ê–¥–º—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –ø—ñ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ—é
@bot.message_handler(commands=['approve'])
def approve_subscription(message):
    if message.chat.id == ADMIN_CHAT_ID:
        try:
            args = message.text.split()
            if len(args) != 3:
                bot.send_message(ADMIN_CHAT_ID, "‚ùå –§–æ—Ä–º–∞—Ç: /approve user_id –¥–Ω—ñ–≤")
                return

            user_id = int(args[1])
            days = int(args[2])
            subscriptions[user_id] = datetime.now() + timedelta(days=days)

            save_subscriptions()  # üî• –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–∞–π–ª

            end_date = subscriptions[user_id].strftime("%d.%m.%Y %H:%M")
            bot.send_message(user_id, f"üéâ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω—ñ–≤!\n–î–æ: *{end_date}*", parse_mode="Markdown")
            bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –¥–ª—è {user_id} –Ω–∞ {days} –¥–Ω—ñ–≤")

        except Exception as e:
            bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
bot.polling(none_stop=True)

# üìå –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['myid'])
def my_id(message):
    bot.send_message(message.chat.id, f"üÜî –í–∞—à user_id: {message.chat.id}", parse_mode="Markdown")
